//--------------------------------------------------------------------------------------
// Copyright 2013 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------
// Generated by ShaderGenerator.exe version 0.1
//--------------------------------------------------------------------------------------

// -------------------------------------
cbuffer cbPerModelValues
{
    row_major float4x4 World : WORLD;
    row_major float4x4 WorldViewProjection : WORLDVIEWPROJECTION;
    row_major float4x4 InverseWorld : INVERSEWORLD;
              float3   LightDirection  : Direction < string UIName = "Light Direction";  string Object = "TargetLight"; int Ref_ID=0; >;
              float4   EyePosition;
    row_major float4x4 LightWorldViewProjection;
};

// -------------------------------------
cbuffer cbPerFrameValues
{
    row_major float4x4  View;
    row_major float4x4  Projection;
              float3    AmbientColor;
              float3    LightColor;
              float3    TotalTimeInSeconds;
	 row_major float4x4  InverseView;
};

// -------------------------------------
struct VS_INPUT
{
    float3 Position : POSITION;
    float3 Normal   : NORMAL;
    float2 UV0      : TEXCOORD0;
};

// -------------------------------------
struct PS_INPUT
{
    float4 Position : SV_POSITION;
    float3 Normal   : NORMAL;
    float2 UV0      : TEXCOORD0;
    float4 LightUV       : TEXCOORD1;
    float3 WorldPosition : TEXCOORD2; // Object space position 
    float FogAmount : TEXCOORD3; // Fog Amount
};

// -------------------------------------
SamplerState SAMPLER0 : register(s0);
Texture2D diffuseLayer1;
Texture2D diffuseLayer2;
Texture2D diffuseLayer3;
Texture2D diffuseLayer4;
Texture2D diffuseLayer5;
Texture2D maskTexture1;
Texture2D maskTexture2;
Texture2D TerrainLightMap;
Texture2D maskTexture3;

// -------------------------------------
float4 LAYER1( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseLayer1.Sample( SAMPLER0, (((input.UV0)) *(20)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(20)) )
#endif
;
}

// -------------------------------------
float4 LAYER2( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseLayer2.Sample( SAMPLER0, (((input.UV0)) *(100)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(100)) )
#endif
;
}

// -------------------------------------
float4 LAYER3( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseLayer3.Sample( SAMPLER0, (((input.UV0)) *(10)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(10)) )
#endif
;
}

// -------------------------------------
float4 LAYER4( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseLayer4.Sample( SAMPLER0, (((input.UV0)) *(50)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(50)) )
#endif
;
}

// -------------------------------------
float4 LAYER5( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseLayer5.Sample( SAMPLER0, (((input.UV0)) *(200)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(200)) )
#endif
;
}

// -------------------------------------
float4 MASK1( PS_INPUT input )
{
    return 
#ifdef _CPUT
maskTexture1.Sample( SAMPLER0, (((input.UV0)) *(1)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(1)) )
#endif
;
}

// -------------------------------------
float4 MASK2( PS_INPUT input )
{
    return 
#ifdef _CPUT
maskTexture2.Sample( SAMPLER0, (((input.UV0)) *(1)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(1)) )
#endif
;
}

// -------------------------------------
float4 MASK3( PS_INPUT input )
{
    return 
#ifdef _CPUT
maskTexture3.Sample( SAMPLER0, (((input.UV0)) *(1)) )
#else
tex2D( SAMPLER0, (((input.UV0)) *(1)) )
#endif
;
}

// -------------------------------------
float4 DIFFUSELERP1( PS_INPUT input )
{
    return lerp( (LAYER1(input) ), ( LAYER2(input) ), ( smoothstep( (0.0005 ), ( 0.25 ), ( MASK1(input) ) ) ) );
}

// -------------------------------------
float4 DIFFUSELERP2( PS_INPUT input )
{
    return lerp( (DIFFUSELERP1(input) ), ( LAYER3(input) ), ( smoothstep( (0.0125 ), ( 0.0005 ), ( MASK1(input) ) ) ) );
}

// -------------------------------------
float4 DIFFUSELERP3( PS_INPUT input )
{
    return lerp( (DIFFUSELERP2(input) ), ( LAYER4(input) ), ( smoothstep( (0.0005 ), ( 0.5 ), ( MASK2(input) ) ) ) );
}

// -------------------------------------
float4 DIFFUSELERP4( PS_INPUT input )
{
    return lerp( (LAYER5(input) ), ( DIFFUSELERP3(input) ), ( smoothstep( (0.5 ), ( 0.05 ), ( MASK3(input) ) ) ) );
}

// -------------------------------------
float4 DIFFUSE( PS_INPUT input )
{
    return DIFFUSELERP4(input);
}

// -------------------------------------
float4 AMBIENT( PS_INPUT input )
{
    return DIFFUSE(input);
}


// -------------------------------------
PS_INPUT VSMain( VS_INPUT input )
{
    PS_INPUT output = (PS_INPUT)0;

    output.Position      = mul( float4( input.Position, 1.0f), WorldViewProjection );
    output.WorldPosition = mul( float4( input.Position, 1.0f), World ).xyz;

    // TODO: transform the light into object space instead of the normal into world space
    output.Normal   = mul( input.Normal, (float3x3)World );
    output.UV0 = input.UV0;
    output.LightUV = mul( float4( input.Position, 1.0f), LightWorldViewProjection );

    const float3 eyePosition = InverseView._m30_m31_m32;
    float3 eyeToPosition   = input.Position.xzy - eyePosition;
    float distanceEyeToPosition = length(eyeToPosition);
    output.FogAmount = saturate((distanceEyeToPosition-FOG_START)/(FOG_END-FOG_START));

    return output;
}

// -------------------------------------
float4 PSMain( PS_INPUT input ) : SV_Target
{
    float2 lightMapUv = input.WorldPosition.xz * 1.0/5280.0f + 0.5f;
    // lightMapUv.y = 1.0-lightMapUv.y;
    float3 lm = TerrainLightMap.Sample( SAMPLER0, lightMapUv );
    float4 result = float4(0,0,0,1);
    float  shadowAmount = lm.r;
    float  foliageAmbientOcclusion = lm.b;

    float3 normal = normalize(input.Normal);

    // Ambient-related computation
    float3 ambientColor = lerp( AmbientColor*0.8f, AmbientColor, foliageAmbientOcclusion ); // TODO: Algebraically simplify
    float3 ambient = ambientColor * AMBIENT(input).xyz;
    result.xyz +=  ambient;
#ifdef _CPUT
   float3 lightDirection = -LightDirection;
#else
   float3 lightDirection = LightDirection;
#endif

    // Diffuse-related computation
    float  nDotL         = saturate( dot( normal, lightDirection ) );
    float3 diffuse       = (LightColor * nDotL) * (shadowAmount * DIFFUSE(input).xyz);
    result.xyz += diffuse;
    result.xyz = lerp( result.xyz, FOG_COLOR, input.FogAmount );

    return result;
}

// -------------------------------------
technique DefaultTechnique
{
    pass pass1
    {
        VertexShader        = compile vs_3_0 VSMain();
        PixelShader         = compile ps_3_0 PSMain();
        ZWriteEnable        = true;
    }
}

